Overview of Problem:
our application is based on solving the IMO 2011 q2(windmill problem),verifying its solution in various cases, problem is stated below:

Let S be a finite set of at least two points in the plane. Assume that no three points of S are collinear. 
A windmill is a process that starts with a line l going through a single point P in S. The line rotates 
clockwise about the pivot P until the first time that the line meets some other point belonging to S. This point,
Q, takes over as the new pivot, and the line now rotates clockwise about Q, until it next meets a point of S.
This process continues indefinitely. Show that we can choose a point P in S and a line l going through P such that
the resulting windmill uses each point of S as a pivot infinitely many times.

in summary, we had to take rotate a line about a point in the set until we collide to another point from the set 
and once we collide, we had to make that point, the centre of rotation and keep going, we have to prove that there
exists a line such that it goes through each and every point in a cycle infinitely many times.

SOLUTION:(the solution stated below can be mathematically proven but isn't proven here as our motive is to verify the solution 
for various cases)
the solution can be divided into 2 parts:
(1) when number of points are odd
(2) when number of points are even

when number of points are odd, 
line which passes through point with a slope such that it divides points to the left of the line and right of the line equally 
is the optimal line for this problem(example: if there were 27 points, then points on the left of line=points on the right of 
line=13 is the optimal line)
In this case, whenever the line comes to the initial point the first time(after rotating 180 degree), the cycle is completed.

when number of points are even, 
line which passes through point with a slope such that it divides points to the left of the line and right of the line such that 
either points on left part=points on right part+1 or vice versa
is the optimal line for this problem(example: if there were 26 points, then both of these solution are correct:
(1)points on the left=13, points on the right=12
(2)points on the left=12, points on the right=13
In this case, the line the line first reaches the initial point 'temporarily'(means reaches once), then when the line comes to
the point second time, cycle is completed

for understanding the solution and problem better we took reference of this video:
https://youtu.be/M64HUIJFTZM?si=AzeCi54D0EbfeIqw


Overview of the what application does and some of the functions used in it:


function of the application is help you to figure out the cycle in which line is rotating from point to point or if the optimal line
is not used then no line would be detected, it tells about the exact path line would follow from point to point and also tells the 
length of the cycle, it also outputs the number of collision the line does with every point.

there are 4 customization options given in start to how to use application:
(1) Randomised point generator: In this mode, non collinear points would be generated by the function random_points_generator() which
takes 2 inputs as (number of points) and (random seed), you would be further prompted to chose number of iterations and verbose. Then 
the program would find the optimal line and would give the exact path it would follow alongside the cycle length and the number of 
times each point collides with line.

(2) Manually entering points: In this mode, instead of random point generation, you can chose the points you want to select for test,
and you can get the outputs as in previous case.

(3) full customizable mode: In this mode, all the previous mode features are there+ you can even customize the line you want, and 
can get the outputs for this case.

(4)custom test case: This is test case to submit for this application as given in task 4. 

One of the most important function for this application was the closest_point_index() function in the rotating_line class which takes input 
as the set of points vector and returns the index of the next point whom line would collide. We implemented this by comparing the slope of all
other points with respect to the centre point and the slope of the line, we solved this by dividing into 2 cases i.e when (1) slope of line>
slope of point with respect of centre point and (2)slope of line<slope of point with respect of centre point.

There was another issue of infinite slope when any 2 points have same x co ordinate, we solved it by taking slope in that case as 100000(very high)


